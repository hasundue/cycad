import { distinct } from "https://deno.land/std@0.204.0/collections/distinct.ts";
import $ from "https://deno.land/x/dax@0.35.0/mod.ts";

// Hard-ported from https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/tools/parsing/tree-sitter/default.nix
export const LangOptions = {
  ocaml: { repo: "ocaml", location: "ocaml" },
  "ocaml-interface": { repo: "ocaml", location: "interface" },
  typescript: { repo: "typescript", location: "typescript" },
  tsx: { repo: "typescript", location: "tsx" },
  typst: { generate: true },
  markdown: { repo: "markdown", location: "tree-sitter-markdown" },
  "markdown-inline": {
    repo: "markdown",
    location: "tree-sitter-markdown-inline",
  },
  wing: { location: "libs/tree-sitter-wing", generate: true },
};

async function generateTypeDeclarationFile() {
  const langs = await fetch(
    `https://api.github.com/repos/NixOS/nixpkgs/contents/pkgs/development/tools/parsing/tree-sitter/grammars`,
  ).then(async (res) => {
    const json = await res.json() as { name: string }[];
    return distinct(
      json
        .filter((item) => item.name.endsWith(".json"))
        .map((item) =>
          item.name.replace(/^tree-sitter-/, "").replace(/\.json$/, "")
        )
        .concat(Object.keys(LangOptions)),
    ).sort();
  });

  const content = `
// Generated by src/langs.ts (do not edit manually)

export type Lang = ${langs.map((lang) => `"${lang}"`).join(" | ")}

export const LangOptions: Partial<Record<Lang, LangOption>> = ${
    JSON.stringify(LangOptions)
  }

export interface LangOption {
  repo?: string;
  location?: string;
  generate?: boolean;
}`;

  await Deno.writeTextFile(
    new URL("./langs.generated.ts", import.meta.url),
    content,
  );
  $.cd(import.meta);
  await $`deno fmt ./langs.generated.ts`.stderr("null");
}

if (import.meta.main) {
  await generateTypeDeclarationFile();
  Deno.exit(0);
}
